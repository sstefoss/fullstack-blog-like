version: "3.6"
services:
  postgres:
    image: postgres:15
    restart: always
    volumes:
      - blog_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - internal

  graphql-engine:
    image: hasura/graphql-engine:v2.26.0
    ports:
      - "8080:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: ${PG_DATABASE_URL}
      PG_DATABASE_URL: ${PG_DATABASE_URL}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" 
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: ${HASURA_GRAPHQL_UNAUTHORIZED_ROLE}
    networks:
      - internal
    depends_on:
      data-connector-agent:
        condition: service_healthy

  data-connector-agent:
    image: hasura/graphql-data-connector:v2.23.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - internal

  migrate:
    image: migrate/migrate:v4.15.2
    profiles: ["tools"]
    volumes:
      - ./db/migrations:/migrations
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "${PG_DATABASE_URL}?sslmode=disable&search_path=public"
      ]
    command: ["up"]
    networks:
      - internal
    depends_on:
      - postgres
    restart: on-failure

  seed:
    container_name: seed
    build:
      context: ./db/seed
      dockerfile: Dockerfile
    environment:
      PG_DATABASE_URL: ${PG_DATABASE_URL}
    networks:
      - internal

  core:
    container_name: core
    build:
      context: ./core
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_PORT: ${DB_PORT}
      DB_HOST: ${DB_HOST}
      CORE_PORT: ${CORE_PORT}
      HASURA_GRAPHQL_ENDPOINT: ${HASURA_GRAPHQL_ENDPOINT}
    volumes:
      - ./core:/usr/src/app
    ports:
      - ${CORE_PORT}:${CORE_PORT}
    networks:
      - internal
    depends_on:
      - postgres

  frontend:
    container_name: frontend
    stdin_open: true
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    environment:
      VITE_HASURA_GRAPHQL_ENDPOINT: ${HASURA_GRAPHQL_ENDPOINT}
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    volumes:
      - "/app/node_modules"
      - "./frontend:/app"
    networks:
      - internal
    depends_on:
      - core

networks:
  internal:
    driver: bridge

volumes:
  blog_data:
